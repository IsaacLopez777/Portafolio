---CREACION DE PERFIL
CREATE PROFILE PROYECTO_LENGUAJES LIMIT 
    SESSIONS_PER_USER 1 
    PASSWORD_LOCK_TIME 30 
    FAILED_LOGIN_ATTEMPTS 5;
    
------alteramos la sesion a 2:    
ALTER PROFILE PROYECTO_LENGUAJES LIMIT 
    SESSIONS_PER_USER 25;

    
---Creacion de usuario y contrase�a:
CREATE USER PROYECTO_FINAL_LENGUAJES IDENTIFIED BY PROYECTO_FINAL_LENGUAJES
DEFAULT TABLESPACE users Profile PROYECTO_LENGUAJES;

--PERMISOS BASICOS PARA LA CONEXION A LA BD
GRANT CONNECT, RESOURCE TO PROYECTO_FINAL_LENGUAJES;

GRANT CREATE SESSION TO PROYECTO_FINAL_LENGUAJES;

ALTER USER PROYECTO_FINAL_LENGUAJES QUOTA UNLIMITED ON USERS;
---permisos para crear vista---
GRANT CREATE VIEW TO PROYECTO_FINAL_LENGUAJES;

GRANT CREATE TRIGGER TO PROYECTO_FINAL_LENGUAJES;




----------------------------------------------------------TABLAS-----------------------------------------------------------------------------

----- CLIENTE
CREATE TABLE LENGUAJES_CLIENTE_TB(
ID_CLIENTE NUMBER CONSTRAINT LENGUAJES_CLIENTE_TB_PK PRIMARY KEY,
NOMBRE VARCHAR2(100),
APELLIDO1 VARCHAR2(100),
APELLIDO2 VARCHAR2(100),
GMAIL VARCHAR2(125) CONSTRAINT LENGUAJES_CLIENTE_TB_GMAIL_UNIQUE UNIQUE
);


----TELEFONO CLIENTE
CREATE TABLE LENGUAJES_TELEFONO_CLIENTE_TB(
ID_TELEFONO NUMBER CONSTRAINT LENGUAJES_TELEFONO_CLIENTE_TB_PK PRIMARY KEY,
ID_CLIENTE NUMBER,
TELEFONO varchar2(25),
CONSTRAINT LENGUAJES_TELEFONO_CLIENTE_TB_FK FOREIGN KEY (ID_CLIENTE) REFERENCES LENGUAJES_CLIENTE_TB(ID_CLIENTE)
);


---- PEDIDOS
CREATE TABLE LENGUAJES_PEDIDO_TB(
ID_PEDIDO NUMBER CONSTRAINT LENGUAJES_PEDIDO_TB_PK PRIMARY KEY,
ID_CLIENTE NUMBER,
FECHA_PEDIDO DATE CONSTRAINT LENGUAJES_PEDIDO_TB_NOT_NULL NOT NULL,
ESTADO_PEDIDO VARCHAR2(50) CONSTRAINT LENGUAJES_PEDIDO_TB_CHK_ESTADO_PEDIDO CHECK (ESTADO_PEDIDO IN ('Pendiente', 'Completado', 'Cancelado')),
CONSTRAINT LENGUAJES_PEDIDO_TB_FK FOREIGN KEY (ID_CLIENTE) REFERENCES LENGUAJES_CLIENTE_TB(ID_CLIENTE)
);

----- USUARIO

CREATE TABLE LENGUAJES_USUARIO_TB(
ID_USUARIO NUMBER CONSTRAINT LENGUAJES_USUARIO_TB_PK PRIMARY KEY,
USERNAME VARCHAR2(125) CONSTRAINT LENGUAJES_USUARIO_TB_UNIQUE UNIQUE,
NOMBRE VARCHAR2(100) CONSTRAINT LENGUAJES_USUARIO_TB_NOT_NULL NOT NULL,
APELLIDO1 VARCHAR2(100),
APELLIDO2 VARCHAR2(100),
GMAIL_USUARIO VARCHAR2(125) CONSTRAINT LENGUAJES_USUARIO_TB_GMAIL_UNIQUE UNIQUE
);

---TELEFONO USUARIO---

CREATE TABLE LENGUAJES_TELEFONO_USUARIO_TB(
ID_TELEFONO_USUARIO NUMBER CONSTRAINT LENGUAJES_TELEFONO_USUARIO_TB_PK PRIMARY KEY,
ID_USUARIO NUMBER, --FK
TELEFONO_USUARIO varchar2(25),
CONSTRAINT LENGUAJES_TELEFONO_USUARIO_TB_FK FOREIGN KEY (ID_USUARIO) REFERENCES LENGUAJES_USUARIO_TB(ID_USUARIO)
);

----TABLA DEL ROL DEL USUARIO---
CREATE TABLE LENGUAJES_ROL_TB(
ID_ROL NUMBER CONSTRAINT LENGUAJES_ROL_TB_PK PRIMARY KEY,
ID_USUARIO NUMBER, --FK
NOMBRE_ROL VARCHAR2(50) CONSTRAINT LENGUAJES_ROL_TB_NOT_NULL NOT NULL,
CONSTRAINT LENGUAJES_ROL_TB_FK FOREIGN KEY (ID_USUARIO) REFERENCES LENGUAJES_USUARIO_TB(ID_USUARIO)
);
---TABLA VENTA

CREATE TABLE LENGUAJES_VENTA_TB(
ID_VENTA NUMBER CONSTRAINT LENGUAJES_VENTA_TB_PK PRIMARY KEY,
ID_PEDIDO NUMBER,
ID_USUARIO NUMBER,
TOTAL NUMBER(10,2) CONSTRAINT LENGUAJES_VENTA_TB_TOTAL_NOT_NULL NOT NULL,
FECHA_VENTA DATE CONSTRAINT LENGUAJES_VENTA_TB_FECHA_NOT_NULL NOT NULL,
CONSTRAINT LENGUAJES_VENTA_TB_FK_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES LENGUAJES_PEDIDO_TB(ID_PEDIDO),
CONSTRAINT LENGUAJES_VENTA_TB_FK_ID_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES LENGUAJES_USUARIO_TB(ID_USUARIO)
);


----TABLA PROVEEDOR-----
CREATE TABLE LENGUAJES_PROVEEDOR_TB(
ID_PROVEEDOR NUMBER CONSTRAINT LENGUAJES_PROVEEDOR_TB_PK PRIMARY KEY,
NOMBRE_PROVEEDOR VARCHAR2(100) CONSTRAINT LENGUAJES_PROVEEDOR_TB_NOMBRE_NOT_NULL NOT NULL,
GMAIL_PROVEEDOR VARCHAR2(125) Constraint LENGUAJES_PROVEEDOR_TB_GMAIL_PROVEEDOR_UNIQUE UNIQUE,
PAIS VARCHAR2(50),
CUIDAD VARCHAR2(50)
);

----------Telefono Proveedor--------

CREATE TABLE LENGUAJES_TELEFONO_PROVEEDOR_TB(
ID_TELEFONO_PROVEEDOR NUMBER CONSTRAINT LENGUAJES_TELEFONO_PROVEEDOR_TB_PK PRIMARY KEY,
ID_PROVEEDOR NUMBER, --FK
TELEFONO_PROVEEDOR varchar2(25) CONSTRAINT LENGUAJES_TELEFONO_PROVEEDOR_TB_TELEFONO_NOT_NULL NOT NULL,
CONSTRAINT LENGUAJES_TELEFONO_PROVEEDOR_TB_FK_ID_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES LENGUAJES_PROVEEDOR_TB(ID_PROVEEDOR)
);

------- CATEGORIA-------------

CREATE TABLE LENGUAJES_CATEGORIA_TB(
ID_CATEGORIA NUMBER CONSTRAINT LENGUAJES_CATEGORIA_TB_PK PRIMARY KEY,
NOMBRE_CATEGORIA VARCHAR2(100) CONSTRAINT LENGUAJES_CATEGORIA_TB_NOMBRE_CATEGORIA_NOT_NULL NOT NULL,
DESCRIPCION VARCHAR(255)
);

----TABLA---PRODUCTO

CREATE TABLE LENGUAJES_PRODUCTO_TB(
ID_PRODUCTO NUMBER CONSTRAINT LENGUAJES_PRODUCTO_TB_PK PRIMARY KEY,
ID_CATEGORIA NUMBER, --FK
ID_PROVEEDOR NUMBER, --FK
NOMBRE_PRODUCTO VARCHAR2(100) CONSTRAINT LENGUAJES_PRODUCTO_TB_NOMBRE_PRODUCTO_NOT_NULL NOT NULL,
STOCK NUMBER CONSTRAINT LENGUAJES_PRODUCTO_TB_STOCK_NOT_NULL NOT NULL,
FECHA_VENCIMIENTO DATE CONSTRAINT LENGUAJES_PRODUCTO_TB_FECHA_VENCIMIENTO_NOT_NULL NOT NULL,
PRECIO NUMBER(10,2) CONSTRAINT LENGUAJES_PRODUCTO_TB_PRECIO_NOT_NULL NOT NULL,
CONSTRAINT LENGUAJES_PRODUCTO_TB_FK_ID_CATEGORIA FOREIGN KEY (ID_CATEGORIA) REFERENCES LENGUAJES_CATEGORIA_TB(ID_CATEGORIA),
CONSTRAINT LENGUAJES_PRODUCTO_TB_FK_ID_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES LENGUAJES_PROVEEDOR_TB(ID_PROVEEDOR)
);

----TABLA--DETALLE--PEDIDO--

CREATE TABLE LENGUAJES_DETALLE_PEDIDO_TB(
ID_DETALLE_PEDIDO NUMBER CONSTRAINT LENGUAJES_DETALLE_PEDIDO_TB_PK PRIMARY KEY,
ID_PEDIDO NUMBER, --FK
ID_PRODUCTO NUMBER, --FK
CANTIDAD NUMBER CONSTRAINT LENGUAJES_DETALLE_PEDIDO_TB_CANTIDAD_NOT_NULL NOT NULL,
PRECIO_DETALLE_PEDIDO NUMBER (10,2) CONSTRAINT LENGUAJES_DETALLE_PEDIDO_TB_PRECIO_DETALLE_PEDIDO_NOT_NULL NOT NULL,
CONSTRAINT LENGUAJES_DETALLE_PEDIDO_TB_FK_ID_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES LENGUAJES_PEDIDO_TB(ID_PEDIDO),
CONSTRAINT LENGUAJES_DETALLE_PEDIDO_TB_FK_ID_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES LENGUAJES_PRODUCTO_TB(ID_PRODUCTO)
);


CREATE TABLE LENGUAJES_FACTURA_TB (
    ID_FACTURA NUMBER CONSTRAINT LENGUAJES_FACTURA_TB_PK PRIMARY KEY,
    ID_VENTA NUMBER CONSTRAINT LENGUAJES_FACTURA_TB_FK_VENTA_REF REFERENCES LENGUAJES_VENTA_TB(ID_VENTA),
    ID_CLIENTE NUMBER CONSTRAINT LENGUAJES_FACTURA_TB_FK_CLIENTE_REF REFERENCES LENGUAJES_CLIENTE_TB(ID_CLIENTE),
    ID_PRODUCTO NUMBER CONSTRAINT LENGUAJES_FACTURA_TB_FK_PRODUCTO_REF REFERENCES LENGUAJES_PRODUCTO_TB(ID_PRODUCTO),
    CANTIDAD NUMBER CONSTRAINT LENGUAJES_FACTURA_TB_CANTIDAD_NN NOT NULL,
    PRECIO_UNITARIO NUMBER(10, 2) CONSTRAINT LENGUAJES_FACTURA_TB_PRECIO_NN NOT NULL,
    PAGO_TOTAL NUMBER(10, 2),
    FECHA_EMISION DATE CONSTRAINT LENGUAJES_FACTURA_TB_FECHA_NN NOT NULL,
    METODO_PAGO VARCHAR2(50) CONSTRAINT LENGUAJES_FACTURA_TB_METODO_NN NOT NULL,
    CONSTRAINT LENGUAJES_FACTURA_TB_METODO_CHK CHECK (METODO_PAGO IN ('Efectivo', 'Tarjeta', 'SINPE MOVIL', 'Transferencia'))
);

--------Auditoria

CREATE TABLE LENGUAJES_AUDITORIA_TB(
ID_AUDITORIA NUMBER CONSTRAINT LENGUAJES_AUDITORIA_TB_PK PRIMARY KEY,
USUARIO VARCHAR2(50)CONSTRAINT LENGUAJES_AUDITORIA_TB_USUARIO_NOT_NULL NOT NULL,
OPERACION VARCHAR2(50) CONSTRAINT LENGUAJES_AUDITORIA_TB_OPERACION_NOT_NULL NOT NULL,
TABLA_AFECTADA VARCHAR2(50) CONSTRAINT LENGUAJES_AUDITORIA_TB_TABLA_AFECTADA_NOT_NULL NOT NULL,
FECHA_OPERACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
SENTENCIA_SQL CLOB
);


----------------------------------------------------Secuencias para cada tabla tenga un valor autoincrementable-----------------------------
CREATE SEQUENCE LENGUAJES_AUDITORIA_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    MINVALUE 1
    NOCACHE 
    ;


--------------------Secuencia Categoria-------------------
CREATE SEQUENCE LENGUAJES_CATEGORIA_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE --No utiliza caché, lo que asegura que cada valor se genere al momento
    ;

--------------------Secuencia Cliente-------------------
CREATE SEQUENCE LENGUAJES_CLIENTE_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
--------------------Secuencia Detalle Pedido-------------------
CREATE SEQUENCE LENGUAJES_DETALLE_PEDIDO_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;

--------------------Secuencia Factura-------------------
CREATE SEQUENCE LENGUAJES_FACTURA_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
--------------------Secuencia PEDIDO-------------------
CREATE SEQUENCE LENGUAJES_PEDIDO_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
--------------------Secuencia PRODUCTO-------------------
CREATE SEQUENCE LENGUAJES_PRODUCTO_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;

--------------------Secuencia PROVEEDOR-------------------
CREATE SEQUENCE LENGUAJES_PROVEEDOR_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;

--------------------Secuencia ROL-------------------
CREATE SEQUENCE LENGUAJES_ROL_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
--------------------Secuencia TELEFONO CLIENTE-------------------
CREATE SEQUENCE LENGUAJES_TELEFONO_CLIENTE_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
--------------------Secuencia TELEFONO PROVEEDOR-------------------
CREATE SEQUENCE LENGUAJES_TELEFONO_PROVEEDOR_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;

--------------------Secuencia TELEFONO USUARIO -------------------
CREATE SEQUENCE LENGUAJES_TELEFONO_USUARIO_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
--------------------Secuencia USUARIO-------------------
CREATE SEQUENCE LENGUAJES_USUARIO_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
--------------------Secuencia VENTA-------------------
CREATE SEQUENCE LENGUAJES_VENTA_SEQ
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 1000000
    MINVALUE 1
    NOCACHE 
    ;
    
COMMIT;  
    
----------------------------------------------------------PROCEDIMIENTOS PARA LOS INSERT----------------------------------------------------------------
---------------------------Procedimiento Insert Cliente-------------------------
CREATE OR REPLACE PROCEDURE INSERT_CLIENTE (
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_GMAIL IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_CLIENTE_TB (
        ID_CLIENTE, NOMBRE, APELLIDO1, APELLIDO2, GMAIL
    ) VALUES (
        LENGUAJES_CLIENTE_SEQ.NEXTVAL, P_NOMBRE, P_APELLIDO1, P_APELLIDO2, P_GMAIL
    );
    
    COMMIT; 

EXCEPTION
    WHEN OTHERS THEN

        ROLLBACK;

        DBMS_OUTPUT.PUT_LINE('ERROR: ' );
END;

---------------------------Procedimiento INSERT Categoria-------------------------
CREATE OR REPLACE PROCEDURE INSERT_CATEGORIA (
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR
) AS
BEGIN
    INSERT INTO LENGUAJES_CATEGORIA_TB (
        ID_CATEGORIA, NOMBRE_CATEGORIA, DESCRIPCION
    ) VALUES (
        LENGUAJES_CATEGORIA_SEQ.NEXTVAL, P_NOMBRE, P_DESCRIPCION
    );
    
    COMMIT; 

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR LA CATEGORIA: ');
END;

-----------------Procedimiento INSERT PEDIDO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_PEDIDO (
    P_ID_CLIENTE IN NUMBER,
    P_FECHA_PEDIDO IN DATE,
    P_ESTADO_PEDIDO IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_PEDIDO_TB (
        ID_PEDIDO, ID_CLIENTE, FECHA_PEDIDO, ESTADO_PEDIDO
    ) VALUES (
        LENGUAJES_PEDIDO_SEQ.NEXTVAL, P_ID_CLIENTE, P_FECHA_PEDIDO, P_ESTADO_PEDIDO
    );

    COMMIT; 
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR EL PEDIDO: ');
END;


-----------------PROCEDIMIENTO INSERT PRODUCTO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_PRODUCTO (
    P_ID_CATEGORIA IN NUMBER,
    P_ID_PROVEEDOR IN NUMBER,
    P_NOMBRE_PRODUCTO IN VARCHAR2,
    P_STOCK IN NUMBER,
    P_FECHA_VENCIMIENTO IN DATE,
    P_PRECIO IN NUMBER
) AS
BEGIN
    INSERT INTO LENGUAJES_PRODUCTO_TB (
        ID_PRODUCTO, ID_CATEGORIA, ID_PROVEEDOR, NOMBRE_PRODUCTO, STOCK, FECHA_VENCIMIENTO, PRECIO
    ) VALUES (
        LENGUAJES_PRODUCTO_SEQ.NEXTVAL, P_ID_CATEGORIA, P_ID_PROVEEDOR, P_NOMBRE_PRODUCTO, P_STOCK, P_FECHA_VENCIMIENTO, P_PRECIO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR PRODUCTO');
END;

-----------------PROCEDIMIENTO INSERT PROVEEDOR-------------------------

CREATE OR REPLACE PROCEDURE INSERT_PROVEEDOR (
    P_NOMBRE_PROVEEDOR IN VARCHAR2,
    P_GMAIL_PROVEEDOR IN VARCHAR2,
    P_PAIS IN VARCHAR2,
    P_CUIDAD IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_PROVEEDOR_TB (
        ID_PROVEEDOR, NOMBRE_PROVEEDOR, GMAIL_PROVEEDOR, PAIS, CUIDAD
    ) VALUES (
        LENGUAJES_PROVEEDOR_SEQ.NEXTVAL, P_NOMBRE_PROVEEDOR, P_GMAIL_PROVEEDOR, P_PAIS, P_CUIDAD
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR PROVEEDOR');
END;

-----------------PROCEDIMIENTO INSERT TELEFONO CLIENTE-------------------------

CREATE OR REPLACE PROCEDURE INSERT_TELEFONO_CLIENTE (
    P_ID_CLIENTE IN NUMBER,
    P_TELEFONO IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_TELEFONO_CLIENTE_TB (
        ID_TELEFONO, ID_CLIENTE, TELEFONO
    ) VALUES (
        LENGUAJES_TELEFONO_CLIENTE_SEQ.NEXTVAL, P_ID_CLIENTE, P_TELEFONO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR TEL�FONO CLIENTE');
END;

-----------------PROCEDIMIENTO INSERT TELEFONO PROVEEDOR-------------------------

CREATE OR REPLACE PROCEDURE INSERT_TELEFONO_PROVEEDOR (
    P_ID_PROVEEDOR IN NUMBER,
    P_TELEFONO_PROVEEDOR IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_TELEFONO_PROVEEDOR_TB (
        ID_TELEFONO_PROVEEDOR, ID_PROVEEDOR, TELEFONO_PROVEEDOR
    ) VALUES (
        LENGUAJES_TELEFONO_PROVEEDOR_SEQ.NEXTVAL, P_ID_PROVEEDOR, P_TELEFONO_PROVEEDOR
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR TEL�FONO PROVEEDOR');
END;

-----------------PROCEDIMIENTO INSERT ROL USUARIO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_ROL (
    P_ID_USUARIO IN NUMBER,
    P_NOMBRE_ROL IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_ROL_TB (
        ID_ROL, ID_USUARIO, NOMBRE_ROL
    ) VALUES (
        LENGUAJES_ROL_SEQ.NEXTVAL, P_ID_USUARIO, P_NOMBRE_ROL
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR ROL');
END;

-----------------PROCEDIMIENTO INSERT TELEFONO USUARIO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_TELEFONO_USUARIO (
    P_ID_USUARIO IN NUMBER,
    P_TELEFONO_USUARIO IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_TELEFONO_USUARIO_TB (
        ID_TELEFONO_USUARIO, ID_USUARIO, TELEFONO_USUARIO
    ) VALUES (
        LENGUAJES_TELEFONO_USUARIO_SEQ.NEXTVAL, P_ID_USUARIO, P_TELEFONO_USUARIO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR TEL�FONO USUARIO');
END;

;

-----------------PROCEDIMIENTO INSERT USUARIO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_USUARIO (
    P_USERNAME IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_GMAIL_USUARIO IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_USUARIO_TB (
        ID_USUARIO, USERNAME, NOMBRE, APELLIDO1, APELLIDO2, GMAIL_USUARIO
    ) VALUES (
        LENGUAJES_USUARIO_SEQ.NEXTVAL, P_USERNAME, P_NOMBRE, P_APELLIDO1, P_APELLIDO2, P_GMAIL_USUARIO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR USUARIO');
END;

-----------------PROCEDIMIENTO INSERT VENTA-------------------------
CREATE OR REPLACE PROCEDURE INSERT_VENTA (
    P_ID_PEDIDO IN NUMBER,
    P_ID_USUARIO IN NUMBER,
    P_TOTAL IN NUMBER,
    P_FECHA_VENTA IN DATE
) AS
BEGIN
    INSERT INTO LENGUAJES_VENTA_TB (
        ID_VENTA, ID_PEDIDO, ID_USUARIO, TOTAL, FECHA_VENTA
    ) VALUES (
        LENGUAJES_VENTA_SEQ.NEXTVAL, P_ID_PEDIDO, P_ID_USUARIO, P_TOTAL, P_FECHA_VENTA
    );

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Venta insertada correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR LA VENTA: ' || SQLERRM);
END INSERT_VENTA;
/


SET SERVEROUTPUT ON;

BEGIN INSERT_VENTA(24, 3, 20000,      
        TO_DATE('2024-12-15', 'YYYY-MM-DD') 
    );
END;
/


select * from lenguajes_venta_tb;
SELECT * FROM LENGUAJES_PEDIDO_TB WHERE ID_PEDIDO = 24;
SELECT * FROM LENGUAJES_USUARIO_TB WHERE ID_USUARIO = 2;






---detalle pedido
select * from lenguajes_detalle_pedido_tb;

CREATE OR REPLACE PROCEDURE INSERT_VENTA (
    P_ID_PEDIDO IN NUMBER,
    P_ID_USUARIO IN NUMBER,
    P_TOTAL IN NUMBER,
    P_FECHA_VENTA IN DATE
) AS
BEGIN
    INSERT INTO LENGUAJES_VENTA_TB (
        ID_VENTA, ID_PEDIDO, ID_USUARIO, TOTAL, FECHA_VENTA
    ) VALUES (
        LENGUAJES_VENTA_SEQ.NEXTVAL, P_ID_PEDIDO, P_ID_USUARIO, P_TOTAL, P_FECHA_VENTA
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR LA VENTA');
END;

COMMIT;

------Procedimientos-------
---------Telefono Cliente

-------Actualizar Informacion Telefono---------
CREATE OR REPLACE PROCEDURE ACTuaLIZAR_TELEFONO_CLIENTE_SP(P_ID_Telefono IN NUMBER,P_TELEFONO IN VARCHAR2 )
AS
BEGIN
    UPDATE lenguajes_telefono_cliente_tb
    SET TELEFONO = P_TELEFONO
    WHERE id_telefono = P_ID_telefono;
    COMMIT;
    
    dbms_output.put_line('Telefono Actualizado');

END ACTUALIZAR_TELEFONO_CLIENTE_SP;

begin 
actualizar_telefono_cliente_sp(116,'01');
end;


---------------Eliminar un Telefono del cliente--------------
CREATE OR REPLACE PROCEDURE ELIMINAR_TELEFONO_CLIENTE_SP(P_ID_TELEFONO IN NUMBER)
AS
BEGIN
    DELETE FROM LENGUAJES_TELEFONO_CLIENTE_TB WHERE ID_TELEFONO = P_ID_TELEFONO;
    DBMS_OUTPUT.PUT_LINE('TELEFONO ELIMINADO CORRECTAMENTE');
    COMMIT;
END ELIMINAR_TELEFONO_CLIENTE_SP;


---------------Ejecucion---------------
BEGIN 
ELIMINAR_TELEFONO_CLIENTE_SP(102);
ELIMINAR_TELEFONO_CLIENTE_SP(103);
END;

select * from lenguajes_telefono_cliente_tb;

-------------------------  ELIMINAR UN PEDIDO-------------

CREATE OR REPLACE PROCEDURE ELIMINAR_PEDIDO_SP(P_ELIMINAR_PEDIDO IN NUMBER)
AS
BEGIN

    DELETE FROM lenguajes_factura_tb
    WHERE ID_VENTA IN
    (SELECT ID_VENTA FROM lenguajes_venta_tb WHERE ID_PEDIDO = P_ELIMINAR_PEDIDO);

    ---ELIMINAR DEPENDENCIA FK

    DELETE FROM lenguajes_venta_tb
    WHERE ID_PEDIDO = p_eliminar_pedido;

    DELETE FROM lenguajes_detalle_pedido_tb
    WHERE ID_PEDIDO = P_ELIMINAR_PEDIDO;
    
    DELETE FROM LENGUAJES_PEDIDO_TB 
    WHERE ID_PEDIDO = P_ELIMINAR_PEDIDO;
    DBMS_OUTPUT.PUT_LINE('Pedido eliminado con exito.' || SQLERRM);
    
END ELIMINAR_PEDIDO_SP;
COMMIT;
SELECT * FROM lenguajes_pedido_tb;
------------Ejecucion---------
SET SERVEROUTPUT ON;
EXECUTE eliminar_PEDIDO_sp(23);

--------------------------MODIFICAR PEDIDOS---------------------
CREATE OR REPLACE PROCEDURE MODIFICAR_PEDIDO_SP(P_ID_PEDIDO IN NUMBER, P_ID_CLIENTE IN NUMBER
, P_FECHA_PEDIDO IN DATE, P_ESTADO_PEDIDO IN VARCHAR)
as
begin
    UPDATE lenguajes_pedido_tb
    SET ID_CLIENTE = P_ID_CLIENTE,
    FECHA_PEDIDO = P_FECHA_PEDIDO,
    ESTADO_PEDIDO = P_ESTADO_PEDIDO
    WHERE ID_PEDIDO = P_ID_PEDIDO;
    
    DBMS_OUTPUT.PUT_LINE('Pedido actulizado');
    commit;

end MODIFICAR_PEDIDO_SP;

SELECT * FROM lenguajes_CLIENTE_tb;
SELECT * FROM  lenguajes_pedido_tb;
-----EJECUCION---------------------
SET SERVEROUTPUT ON;
BEGIN
    MODIFICAR_PEDIDO_SP(24, 26, TO_DATE('2025-12-01', 'YYYY-MM-DD'), 'Pendiente');
END;
/

--------------------------------Usuarios------------------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_USUARIO_SP(P_ID_USUARIO IN VARCHAR)
AS
BEGIN

    -----ELIMINAR TELEFONO  ASOCIADO
    
    DELETE FROM lenguajes_telefono_usuario_tb
    WHERE ID_USUARIO = P_ID_USUARIO;

    ----ELIMINAR PRIMERO ROL
    DELETE FROM LENGUAJES_ROL_TB
    WHERE ID_USUARIO = P_ID_USUARIO;

    DELETE FROM LENGUAJES_USUARIO_TB 
    WHERE ID_USUARIO = P_ID_USUARIO;
    DBMS_OUTPUT.PUT_LINE('USUARIO ELIMINADO CON EXITO' || SQLERRM);
    COMMIT;

END ELIMINAR_USUARIO_SP;

SELECT * FROM LENGUAJES_USUARIO_TB;

--------EJECUCION--------
SET SERVEROUTPUT ON;
EXECUTE ELIMINAR_USUARIO_SP(10);

------------MODIFICAR EMPLEADO----------------

CREATE OR REPLACE PROCEDURE MODIFICAR_USUARIO_SP(P_ID_USUARIO IN NUMBER,
P_USERNAME IN VARCHAR, P_NOMBRE IN VARCHAR, P_APELLIDO1 IN VARCHAR,
P_APELLIDO2 IN VARCHAR, P_GMAIL IN VARCHAR
)AS
BEGIN

    ---MODIFICAR
    UPDATE LENGUAJES_USUARIO_TB
    SET USERNAME = P_USERNAME,
    NOMBRE = P_NOMBRE,
    APELLIDO1 = P_APELLIDO1,
    APELLIDO2 = P_APELLIDO2,
    GMAIL_usuario = P_GMAIL
    WHERE ID_USUARIO = P_ID_USUARIO;
    DBMS_OUTPUT.PUT_LINE('Usuario Actualizado con exito');
    commit;

END MODiFICAR_USUARIO_SP;

select * from lenguajes_usuario_tb;
-----------ejecucion-----------
set serveroutput on;
begin
modificar_usuario_sp(9,'Fabian123','Fabian','Avila','Lobo','Fabianlobo@gmail.com');
end;

------------------------Ventas----------------------------
-----------------Eliminar---Veta------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_VENTA_SP(
    P_ID_VENTA IN NUMBER
)
AS
BEGIN
    DELETE FROM lenguajes_factura_tb
    WHERE id_venta = P_ID_VENTA;

    DELETE FROM lenguajes_detalle_pedido_tb
    WHERE id_pedido IN (
        SELECT id_pedido 
        FROM lenguajes_venta_tb 
        WHERE id_venta = P_ID_VENTA
    );

    DELETE FROM lenguajes_venta_tb
    WHERE id_venta = P_ID_VENTA;

    DBMS_OUTPUT.PUT_LINE('Venta Eliminada' || sqlerrm);

    COMMIT;
END ELIMINAR_VENTA_SP;
/


------Ejecucion----
Execute eliminar_venta_sp(49);

SELECT * FROM LENGUAJES_VENTA_TB;
SELECT * FROM LENGUAJES_detalle_pedido_tb;


-------Modificar venta----------------
CREATE OR REPLACE PROCEDURE MODIFICAR_VENTA_SP(
    P_ID_VENTA IN NUMBER,
    P_ID_PEDIDO IN NUMBER,
    P_ID_USUARIO IN NUMBER,
    P_TOTAL IN NUMBER,
    P_FECHA_VENTA IN DATE
) AS
BEGIN
    UPDATE LENGUAJES_VENTA_TB
    SET 
        ID_PEDIDO = P_ID_PEDIDO,
        ID_USUARIO = P_ID_USUARIO,
        TOTAL = P_TOTAL,
        FECHA_VENTA = P_FECHA_VENTA
    WHERE ID_VENTA = P_ID_VENTA;

    DBMS_OUTPUT.PUT_LINE('Venta modificada');
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al modificar la venta: ' || SQLERRM);
END MODIFICAR_VENTA_SP;
---EJECUCION----

SELECT * FROM LENGUAJES_VENTA_TB;

SET SERVEROUTPUT ON;
BEGIN
 MODIFICAR_VENTA_SP(60,24,2,5000,TO_DATE('2024-05-01','YYYY-MM-DD'));
END;


------------------------CATEGORIA----------------------
------------------ELIMINAR CATEGORIA--------------
CREATE OR REPLACE PROCEDURE ELIMINAR_CATEGORIA_SP(p_ID_CATEGORIA IN NUMBER)
AS
BEGIN
    DELETE FROM lenguajes_producto_tb
    WHERE ID_CATEGORIA = P_ID_CATEGORIA;

    DELETE FROM lenguajes_categoria_tb
    WHERE ID_CATEGORIA = P_ID_CATEGORIA;
    
    DBMS_OUTPUT.PUT_LINE('Categoria eliminada');
    commit;

END ELIMINAR_CATEGORIA_SP;

-----------------Ejecucion------
set serveroutput on;
execute eliminar_categoria_sp(10);

select * from lenguajes_categoria_tb;


------MODIFICAR---CATEGORIA
CREATE OR REPLACE PROCEDURE MODIFICAR_CATEGORIA_SP(P_ID_CATEGORIA IN NUMBER,
P_NOMBRE_CATEGORIA IN VARCHAR, P_DESCRIPCION IN VARCHAR
)AS
BEGIN
    UPDATE LENGUAJES_CATEGORIA_TB
    SET NOMBRE_CATEGORIA = P_NOMBRE_CATEGORIA,
    DESCRIPCION = P_DESCRIPCION
    where id_categoria = p_id_categoria;
    dbms_output.put_line('Categoria actulizada con exito');
    commit;
END MODIFICAR_CATEGORIA_SP;
----ejecucion-----
select * from lenguajes_categoria_tb;
set serveroutput on;
begin
modificar_categoria_sp(3,'Suplementos para ganar masa','Esta categoria esta dise�a para los athetas de alto rendimiento');
end;


-------------Eliminar Proveedor-------
CREATE OR REPLACE PROCEDURE ELIMINAR_PROVEEDOR_SP(P_ID_PROVEEDOR IN NUMBER)
AS
BEGIN 
    DELETE FROM lenguajes_telefono_proveedor_tb
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;

    DELETE FROM LENGUAJES_PRODUCTO_TB
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;

    DELETE FROM LENGUAJES_PROVEEDOR_TB
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;
    
    DBMS_OUTPUT.PUT_LINE('PROVEEDOR ELIMINADO' || SQLERRM) ;
END ELIMINAR_PROVEEDOR_SP;

SELECT * FROM lenguajes_proveedor_tb;

EXECUTE ELIMINAR_PROVEEDOR_SP(1);

----------Modificar proveedor--------------------
CREATE OR REPLACE PROCEDURE MODIFICAR_PROVEEDOR_SP(
P_ID_PROVEEDOR IN NUMBER, P_NOMBRE_PROVEEDOR IN VARCHAR,P_GMAIL_PROVEEDOR IN VARCHAR,
P_PAIS IN VARCHAR, P_CUIDAD IN VARCHAR
)
AS
BEGIN 
    UPDATE LENGUAJES_PROVEEDOR_TB
    SET NOMBRE_PROVEEDOR = P_NOMBRE_PROVEEDOR,
    GMAIL_PROVEEDOR = P_GMAIL_PROVEEDOR,
    PAIS = P_PAIS,
    CUIDAD = P_CUIDAD
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('PROVEEDOR ACTULIZADO CON EXITO');
    
END MODIFICAR_PROVEEDOR_SP;

---EJECUCION---
begin 
MODiFICAR_PROVEEDOR_SP(9,'MEDICINA','MEDICINA56@GMAIL.COM','COSTA RICA','San Jose');
end;


SELECT * FROM LENGUAJES_PROVEEDOR_TB;


------ELIMINAR PRODUCTO (Medicamento)----------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO_SP(P_ID_PRODUCTO IN NUMBER)AS
BEGIN
    DELETE FROM LENGUAJES_DETALLE_PEDIDO_TB
    WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    
    DELETE FROM LENGUAJES_PRODUCTO_TB
    WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    
    DBMS_OUTPUT.PUT_LINE('PRODUCTO ELIMINADO');
    COMMIT;

END ELIMINAR_PRODUCTO_SP;

---------------EJECUCION-------
SELECT * FROM LENGUAJES_PRODUCTO_TB;
EXECUTE ELIMINAR_PRODUCTO_SP(2);


----------------MODIFICAR PRODUCTO-------------

CREATE OR REPLACE PROCEDURE MODIFICAR_PRODUCTO_SP(P_ID_PRODUCTO IN NUMBER,
P_ID_CATEGORIA IN NUMBER,
P_ID_PROVEEDOR IN NUMBER,
P_NOMBRE_PRODUCTO IN VARCHAR,
P_STOCK IN NUMBER,
P_FECHA_VENCIMIENTO IN DATE,
P_PRECIO IN NUMBER
)
AS
BEGIN

    UPDATE LENGUAJES_PRODUCTO_TB
    SET ID_CATEGORIA = P_ID_categoria,
    id_proveedor = p_id_proveedor,
    nombre_producto = p_nombre_producto,
    stock = p_stock,
    fecha_vencimiento = p_fecha_vencimiento,
    precio = p_precio
    where id_producto = p_id_producto;
    
    dbms_output.put_line('Producto actulizado.');
    commit;
END MODIFICAR_PRODUCTO_SP;
-------ejecucion--------
execute modificar_producto_sp(11,2,3,'Testo','20',to_date('2024-04-05','yyyy-mm-dd'),100000);
select * from lenguajes_producto_tb;


-------------------Modificar Factura -------------------------
CREATE OR REPLACE PROCEDURE MODIFICAR_FACTURA_SP(
    P_ID_FACTURA IN NUMBER,
    P_ID_VENTA IN NUMBER,
    P_ID_CLIENTE IN NUMBER,
    P_ID_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_UNITARIO IN NUMBER,
    P_FECHA_EMISION IN DATE,
    P_METODO_PAGO IN VARCHAR2
) AS
BEGIN
    IF P_METODO_PAGO NOT IN ('Efectivo', 'Tarjeta', 'SINPE MOVIL', 'Paypal', 'Transferencia') THEN
        RAISE_APPLICATION_ERROR(-20001, 'M�todo de pago no v�lido');
    END IF;

    UPDATE LENGUAJES_FACTURA_TB
    SET 
        ID_VENTA = P_ID_VENTA,
        ID_CLIENTE = P_ID_CLIENTE,
        ID_PRODUCTO = P_ID_PRODUCTO,
        CANTIDAD = P_CANTIDAD,
        PRECIO_UNITARIO = P_PRECIO_UNITARIO,
        PAGO_TOTAL = P_CANTIDAD * P_PRECIO_UNITARIO,
        FECHA_EMISION = P_FECHA_EMISION,
        METODO_PAGO = P_METODO_PAGO
    WHERE ID_FACTURA = P_ID_FACTURA;

END MODIFICAR_FACTURA_SP;
/
SELECT * FROM LENGUAJES_FACTURA_TB;
---------------EJECUCION DEL PROCEDIMIENTO
BEGIN
    MODIFICAR_FACTURA_SP(22, 67, 26, 11, 5, 20000, SYSDATE, 'Paypal');
END;
/

-------------Eliminar factura---------------
CREATE OR REPLACE PROCEDURE ELIMINAR_FACTURA_SP(P_ID_FACTURA IN NUMBER)
AS
BEGIN
 
    DELETE FROM LENGUAJES_FACTURA_TB
    WHERE ID_FACTURA = P_ID_FACTURA;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Factura eliminado correctamente.' || SQLERRM);

END ELIMINAR_FACTURA_SP;

-----ejecucion----
set serveroutput on;
execute eliminar_factura_sp(23);
select * from lenguajes_factura_tb;


---------------------------------------------------------vistas--------------------------------------------------------------
-----------------VISTAS------------

----------------------------------------------------------

-- #6: Vista de Medicamentos Vencidos (Requerimieto usuario 4)
-- Nota: Para crear la vista se necesita asignar privilegio.
-- GRANT CREATE VIEW TO PROYECTO_FINAL_LENGUAJES;

CREATE OR REPLACE VIEW MOSTRAR_PRODUCTOS_VENCIDOS
AS
SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, FECHA_VENCIMIENTO
FROM LENGUAJES_PRODUCTO_TB
WHERE TRUNC(FECHA_VENCIMIENTO) < TRUNC(SYSDATE);


-- Prueba vista
-- Se inserta un producto vencido.
EXEC INSERT_PRODUCTO(1, 2, 'Paracetamol 800mg', 80, TO_DATE('2024-07-01', 'YYYY-MM-DD'), 2500);
SELECT * from MOSTRAR_PRODUCTOS_VENCIDOS

----------------------------------------------------------
-- #7: Vista de Medicamentos Vencidos (Requerimieto usuario 4)
-- Muestra los productos que tienen menos de 30 unidades en Stock.
-- Nota: Para crear la vista se necesita asignar privilegio.
-- GRANT CREATE VIEW TO PROYECTO_FINAL_LENGUAJES;

CREATE OR REPLACE VIEW MOSTRAR_PRODUCTOS_BAJOS_STOCK
AS
SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, STOCK
FROM LENGUAJES_PRODUCTO_TB
WHERE STOCK < 30;

-- Prueba vista
-- Se inserta un producto con numero menor a 30 de stock.
EXEC INSERT_PRODUCTO(1, 2, 'Clorfeniramina 4mg', 15, TO_DATE('2024-07-01', 'YYYY-MM-DD'), 1500);

SELECT * from MOSTRAR_PRODUCTOS_BAJOS_STOCK

----------------------------------------------------------
-- 8 Vista Total de ventas del dia

CREATE OR REPLACE VIEW TOTAL_VENTAS_DIA
AS
    SELECT TO_CHAR(FECHA_VENTA, 'YYYY-MM-DD') AS Fecha, SUM(TOTAL) AS Total_Ventas
    FROM LENGUAJES_VENTA_TB
    GROUP BY TO_CHAR(FECHA_VENTA, 'YYYY-MM-DD');


-- Prueba de vista
-- Sen insertan 3 ventas para confirmar si se suman bien las vetnas.
EXEC INSERT_VENTA(2,1,8500,TO_DATE('2024-11-30', 'YYYY-MM-DD'))
EXEC INSERT_VENTA(5,1,10000,TO_DATE('2024-11-29', 'YYYY-MM-DD'))
EXEC INSERT_VENTA(8,1,15000,TO_DATE('2024-11-29', 'YYYY-MM-DD'))

SELECT * from TOTAL_VENTAS_DIA
------------------------Vista cliente telefono

CREATE VIEW CLIENTE_TELEFONO_VW
AS
SELECT C.ID_CLIENTE, C.NOMBRE,T.TELEFONO
FROM LENGUAJES_CLIENTE_TB C
INNER JOIN LENGUAJES_TELEFONO_CLIENTE_TB T
ON C.ID_CLIENTE = T.ID_CLIENTE;


SELECT * FROM CLIENTE_TELEFONO_VW;

-----------------vsita facturas-------------
CREATE OR REPLACE VIEW VISTA_FACTURAS_VW AS
SELECT 
    C.ID_CLIENTE,
    C.NOMBRE || ' ' || C.APELLIDO1 || ' ' || C.APELLIDO2 AS NOMBRE_CLIENTE,
    P.NOMBRE_PRODUCTO,
    F.FECHA_EMISION,
    F.CANTIDAD,
    F.PAGO_TOTAL
FROM 
    LENGUAJES_FACTURA_TB F
INNER JOIN 
    LENGUAJES_CLIENTE_TB C ON F.ID_CLIENTE = C.ID_CLIENTE
INNER JOIN 
    LENGUAJES_PRODUCTO_TB P ON F.ID_PRODUCTO = P.ID_PRODUCTO;


SELECT * FROM VISTA_FACTURAS_VW;

-----------------------.-----------------------------INSERT A LAS TABLAS----------------------------------------------------------
------INSERT CLIENTES---------
select * from lenguajes_cliente_tb;
BEGIN
  INSERT_CLIENTE('Juan', 'Perez', 'Lopez', 'juan.perez@gmail.com');
  INSERT_CLIENTE('Maria', 'Rodriguez', 'Diaz', 'maria.rodriguez@gmail.com');
  INSERT_CLIENTE('Luis', 'Gomez', 'Martinez', 'luis.gomez@gmail.com');
  INSERT_CLIENTE('Ana', 'Garcia', 'Hernandez', 'ana.garcia@gmail.com');
  INSERT_CLIENTE('Carlos', 'Lopez', 'Fernandez', 'carlos.lopez@gmail.com');
  INSERT_CLIENTE('Laura', 'Sanchez', 'Ruiz', 'laura.sanchez@gmail.com');
  INSERT_CLIENTE('Miguel', 'Morales', 'Torres', 'miguel.morales@gmail.com');
  INSERT_CLIENTE('Sofia', 'Ortiz', 'Castillo', 'sofia.ortiz@gmail.com');
  INSERT_CLIENTE('David', 'Mendoza', 'Jimenez', 'david.mendoza@gmail.com');
  INSERT_CLIENTE('Elena', 'Vega', 'Paredes', 'elena.vega@gmail.com');
  INSERT_CLIENTE('Jorge', 'Ramos', 'Flores', 'jorge.ramos@gmail.com');
  INSERT_CLIENTE('Camila', 'Reyes', 'Navarro', 'camila.reyes@gmail.com');
  INSERT_CLIENTE('Andres', 'Castro', 'Alvarez', 'andres.castro@gmail.com');
  INSERT_CLIENTE('Daniela', 'Mora', 'Bautista', 'daniela.mora@gmail.com');
  INSERT_CLIENTE('Jose', 'Herrera', 'Salazar', 'jose.herrera@gmail.com');
END;


-----Insert categoria
BEGIN
  INSERT_CATEGORIA('Medicamentos para el Dolor', 'Categor�a que agrupa los medicamentos para el alivio del dolor, como analg�sicos y antiinflamatorios.');
  INSERT_CATEGORIA('Antibi�ticos', 'Categor�a que incluye todos los medicamentos utilizados para tratar infecciones bacterianas.');
  INSERT_CATEGORIA('Suplementos Alimenticios', 'Categor�a dedicada a los productos como vitaminas y minerales que complementan la dieta diaria.');
  INSERT_CATEGORIA('Medicamentos para la Presi�n Arterial', 'Categor�a que abarca los medicamentos utilizados para controlar la hipertensi�n.');
  INSERT_CATEGORIA('Productos para la Salud Digestiva', 'Categor�a relacionada con medicamentos y productos para tratar problemas digestivos.');
  INSERT_CATEGORIA('Medicamentos para la Diabetes', 'Categor�a que incluye productos para el control de la diabetes, como insulina y antidiab�ticos orales.');
  INSERT_CATEGORIA('Cuidado de la Piel', 'Categor�a que agrupa productos para el cuidado dermatol�gico, como cremas y ung�entos.');
  INSERT_CATEGORIA('Productos de Higiene Personal', 'Categor�a dedicada a productos como jabones, shampoos y productos de cuidado personal.');
  INSERT_CATEGORIA('Medicamentos para el Sistema Respiratorio', 'Categor�a que incluye medicamentos para tratar afecciones respiratorias como asma y bronquitis.');
  INSERT_CATEGORIA('Productos para Beb�s', 'Categor�a que abarca medicamentos y productos espec�ficos para la salud de los beb�s, como pa�ales y f�rmulas infantiles.');
END;
/

----insert proveedor---

BEGIN
  INSERT_PROVEEDOR('Farmacia del Sol', 'contacto@farmaciadelsol.com', 'Costa Rica', 'San Jos�');
  INSERT_PROVEEDOR('Distribuidora Sanitaria', 'ventas@distribuidorasanitaria.com', 'M�xico', 'Ciudad de M�xico');
  INSERT_PROVEEDOR('MedSupplies', 'proveedor@medsupplies.com', 'Panam�', 'Panam�');
  INSERT_PROVEEDOR('BioMedica', 'info@biomedica.com', 'Colombia', 'Bogot�');
  INSERT_PROVEEDOR('Salud y Vida', 'contacto@saludyvida.com', 'Argentina', 'Buenos Aires');
  INSERT_PROVEEDOR('FarmaPlus', 'contacto@farmaplus.com', 'Chile', 'Santiago');
  INSERT_PROVEEDOR('Laboratorios Global', 'atencion@laboratoriosglobal.com', 'Espa�a', 'Madrid');
  INSERT_PROVEEDOR('Medicamentos del Pac�fico', 'info@medpacifico.com', 'Per�', 'Lima');
  INSERT_PROVEEDOR('Distribuci�n M�dica', 'ventas@distribucionmedica.com', 'Ecuador', 'Quito');
  INSERT_PROVEEDOR('Proveedora Farma', 'proveedor@proveedorafarma.com', 'Costa Rica', 'Alajuela');
END;
/
select * from lenguajes_telefono_proveedor_tb;
BEGIN
  INSERT_TELEFONO_PROVEEDOR(22, '87012345');
  INSERT_TELEFONO_PROVEEDOR(23, '70098765');
  INSERT_TELEFONO_PROVEEDOR(24, '60012345');
  INSERT_TELEFONO_PROVEEDOR(25, '87076543');
  INSERT_TELEFONO_PROVEEDOR(26, '70987654');
  INSERT_TELEFONO_PROVEEDOR(27, '60987654');
  INSERT_TELEFONO_PROVEEDOR(28, '87023456');
  INSERT_TELEFONO_PROVEEDOR(29, '70345678');
  INSERT_TELEFONO_PROVEEDOR(30, '60234567');
  INSERT_TELEFONO_PROVEEDOR(31, '87087654');
END;
/


BEGIN
  INSERT_USUARIO('juan123', 'Juan', 'Perez', 'Lopez', 'juan.perez@gmail.com');
  INSERT_USUARIO('maria456', 'Maria', 'Rodriguez', 'Diaz', 'maria.rodriguez@gmail.com');
  INSERT_USUARIO('luis789', 'Luis', 'Gomez', 'Martinez', 'luis.gomez@gmail.com');
  INSERT_USUARIO('ana112', 'Ana', 'Garcia', 'Hernandez', 'ana.garcia@gmail.com');
  INSERT_USUARIO('carlos223', 'Carlos', 'Lopez', 'Fernandez', 'carlos.lopez@gmail.com');
  INSERT_USUARIO('laura334', 'Laura', 'Sanchez', 'Ruiz', 'laura.sanchez@gmail.com');
  INSERT_USUARIO('miguel445', 'Miguel', 'Morales', 'Torres', 'miguel.morales@gmail.com');
  INSERT_USUARIO('sofia556', 'Sofia', 'Ortiz', 'Castillo', 'sofia.ortiz@gmail.com');
  INSERT_USUARIO('david667', 'David', 'Mendoza', 'Jimenez', 'david.mendoza@gmail.com');
  INSERT_USUARIO('elena778', 'Elena', 'Vega', 'Paredes', 'elena.vega@gmail.com');
END;
/

BEGIN
  INSERT_ROL(1, 'Administrador');
  INSERT_ROL(1, 'Vendedor');
  INSERT_ROL(1, 'Cajero');
  INSERT_ROL(2, 'Administrador');
  INSERT_ROL(2, 'Vendedor');
  INSERT_ROL(3, 'Cajero');
  INSERT_ROL(3, 'Vendedor');
  INSERT_ROL(4, 'Administrador');
  INSERT_ROL(4, 'Cajero');
  INSERT_ROL(5, 'Vendedor');
END;
/

select * from lenguajes_telefono_usuario_tb;
BEGIN
  INSERT_TELEFONO_USUARIO(1, '87654321');
  INSERT_TELEFONO_USUARIO(2, '70654321');
  INSERT_TELEFONO_USUARIO(3, '60765432');
  INSERT_TELEFONO_USUARIO(4, '87651234');
  INSERT_TELEFONO_USUARIO(5, '70651234');
  INSERT_TELEFONO_USUARIO(6, '60761234');
  INSERT_TELEFONO_USUARIO(7, '87659876');
  INSERT_TELEFONO_USUARIO(8, '70659876');
  INSERT_TELEFONO_USUARIO(9, '60769876');
  INSERT_TELEFONO_USUARIO(10, '87650987');
END;
/
select * from lenguajes_telefono_cliente_tb
BEGIN
  INSERT_TELEFONO_CLIENTE(22, '87654321');
  INSERT_TELEFONO_CLIENTE(23, '70654321');
  INSERT_TELEFONO_CLIENTE(24, '60765432');
  INSERT_TELEFONO_CLIENTE(25, '87651234');
  INSERT_TELEFONO_CLIENTE(26, '70651234');
  INSERT_TELEFONO_CLIENTE(27, '60761234');
  INSERT_TELEFONO_CLIENTE(28, '87659876');
  INSERT_TELEFONO_CLIENTE(29, '70659876');
  INSERT_TELEFONO_CLIENTE(30, '60769876');
  INSERT_TELEFONO_CLIENTE(22, '87650987');
END;
/
select * from lenguajes_pedido_tb;

BEGIN
  INSERT_PEDIDO(22, TO_DATE('2024-11-28', 'YYYY-MM-DD'), 'Pendiente');
  INSERT_PEDIDO(23, TO_DATE('2024-11-27', 'YYYY-MM-DD'), 'Completado');
  INSERT_PEDIDO(24, TO_DATE('2024-11-26', 'YYYY-MM-DD'), 'Cancelado');
  INSERT_PEDIDO(25, TO_DATE('2024-11-25', 'YYYY-MM-DD'), 'Pendiente');
  INSERT_PEDIDO(26, TO_DATE('2024-11-24', 'YYYY-MM-DD'), 'Completado');
  INSERT_PEDIDO(27, TO_DATE('2024-11-23', 'YYYY-MM-DD'), 'Cancelado');
  INSERT_PEDIDO(28, TO_DATE('2024-11-22', 'YYYY-MM-DD'), 'Pendiente');
  INSERT_PEDIDO(29, TO_DATE('2024-11-21', 'YYYY-MM-DD'), 'Completado');
  INSERT_PEDIDO(30, TO_DATE('2024-11-20', 'YYYY-MM-DD'), 'Cancelado');
  INSERT_PEDIDO(31, TO_DATE('2024-11-19', 'YYYY-MM-DD'), 'Pendiente');
END;
/

BEGIN
    INSERT_VENTA(21, 1, 1500, TO_DATE('2024-11-25', 'YYYY-MM-DD'));
    INSERT_VENTA(22, 2, 2000, TO_DATE('2024-11-26', 'YYYY-MM-DD'));
    INSERT_VENTA(23, 3, 2500, TO_DATE('2024-11-27', 'YYYY-MM-DD'));
    INSERT_VENTA(24, 4, 3000, TO_DATE('2024-11-28', 'YYYY-MM-DD'));
    INSERT_VENTA(25, 5, 1800, TO_DATE('2024-11-29', 'YYYY-MM-DD'));
    INSERT_VENTA(26, 6, 2200, TO_DATE('2024-11-30', 'YYYY-MM-DD'));
    INSERT_VENTA(27, 7, 2700, TO_DATE('2024-12-01', 'YYYY-MM-DD'));
    INSERT_VENTA(28, 8, 3200, TO_DATE('2024-12-02', 'YYYY-MM-DD'));
    INSERT_VENTA(29, 9, 3500, TO_DATE('2024-12-03', 'YYYY-MM-DD'));
    INSERT_VENTA(30, 10, 4000, TO_DATE('2024-12-04', 'YYYY-MM-DD'));
END;


BEGIN
  INSERT_FACTURA(41, 22, 25000, TO_DATE('2024-11-28', 'YYYY-MM-DD'));
  INSERT_FACTURA(42, 23, 15000, TO_DATE('2024-11-27', 'YYYY-MM-DD'));
  INSERT_FACTURA(43, 24, 8000, TO_DATE('2024-11-26', 'YYYY-MM-DD'));
  INSERT_FACTURA(44, 25, 4000, TO_DATE('2024-11-25', 'YYYY-MM-DD'));
  INSERT_FACTURA(45, 26, 12000, TO_DATE('2024-11-24', 'YYYY-MM-DD'));
  INSERT_FACTURA(46, 27, 6000, TO_DATE('2024-11-23', 'YYYY-MM-DD'));
  INSERT_FACTURA(47, 28, 9000, TO_DATE('2024-11-22', 'YYYY-MM-DD'));
  INSERT_FACTURA(48, 29, 18000, TO_DATE('2024-11-21', 'YYYY-MM-DD'));
  INSERT_FACTURA(49, 30, 25000, TO_DATE('2024-11-20', 'YYYY-MM-DD'));
  INSERT_FACTURA(50, 31, 5000, TO_DATE('2024-11-19', 'YYYY-MM-DD'));
END;
/


BEGIN
  INSERT_PRODUCTO(1, 2, 'Paracetamol 500mg', 100, TO_DATE('2025-05-01', 'YYYY-MM-DD'), 2000);
  INSERT_PRODUCTO(2, 3, 'Ibuprofeno 200mg', 150, TO_DATE('2025-06-15', 'YYYY-MM-DD'), 1500);
  INSERT_PRODUCTO(1, 4, 'Amoxicilina 250mg', 50, TO_DATE('2025-07-20', 'YYYY-MM-DD'), 1200);
  INSERT_PRODUCTO(3, 2, 'Aspirina 100mg', 200, TO_DATE('2025-08-10', 'YYYY-MM-DD'), 1000);
  INSERT_PRODUCTO(2, 5, 'Omeprazol 20mg', 80, TO_DATE('2025-09-30', 'YYYY-MM-DD'), 2500);
  INSERT_PRODUCTO(1, 3, 'Loratadina 10mg', 120, TO_DATE('2025-10-10', 'YYYY-MM-DD'), 1100);
  INSERT_PRODUCTO(4, 2, 'Paracetamol 1g', 90, TO_DATE('2025-12-05', 'YYYY-MM-DD'), 1800);
  INSERT_PRODUCTO(3, 4, 'Clonazepam 0.5mg', 60, TO_DATE('2025-12-25', 'YYYY-MM-DD'), 1500);
  INSERT_PRODUCTO(2, 5, 'Furosemida 40mg', 200, TO_DATE('2025-11-15', 'YYYY-MM-DD'), 2200);
  INSERT_PRODUCTO(4, 3, 'Diazepam 10mg', 50, TO_DATE('2025-07-30', 'YYYY-MM-DD'), 1600);
END;
/
-------Detalle_pedido:
INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 21, 1, 2, 1500.50);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 22, 2, 3, 2000.00);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 23, 3, 1, 800.75);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 24, 4, 5, 3000.00);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 25, 5, 4, 1200.50);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 26, 6, 2, 600.00);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 27, 7, 3, 900.75);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 28, 8, 1, 1800.25);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 29, 9, 4, 2500.00);

INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO)
VALUES (LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, 30, 10, 2, 500.00);


-----verificacion de datos-------------
select * from lenguajes_proveedor_tb;
select * from lenguajes_categoria_tb;
select * from lenguajes_telefono_cliente_tB;
select * from lenguajes_cliente_tb;
select * from lenguajes_pedido_tb;
select * from lenguajes_venta_tb;
select * from lenguajes_factura_tb;
select * from lenguajes_telefono_proveedor_tb;
select * from lenguajes_detalle_pedido_tb;
select * from lenguajes_producto_tb;
select * from lenguajes_usuario_tb;
select * from lenguajes_rol_tb;
select * from lenguajes_telefono_usuario_tb;
select * from lenguajes_categoria_tb;


--------------------------------------------------------------FUNCIONES------------------------------------------------------------
-----------------------------FUNCIONES---------------------------------------

-- 1. Funcion que retorna el nombre del cliente si encuentra el ID
CREATE OR REPLACE FUNCTION GET_NOMBRE_COMPLETO_CLIENTE (
    P_ID_CLIENTE IN NUMBER
) 
RETURN VARCHAR2 
IS
    --Valor a devolver
    V_NOMBRE_COMPLETO VARCHAR2(300);
BEGIN
    --Une los datos con separadores
    SELECT NOMBRE || ' ' || APELLIDO1 || ' ' || NVL(APELLIDO2, '')
    INTO V_NOMBRE_COMPLETO
    FROM LENGUAJES_CLIENTE_TB
    --Busca el ID
    WHERE ID_CLIENTE = P_ID_CLIENTE;

    RETURN V_NOMBRE_COMPLETO;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Cliente no encontrado';
END GET_NOMBRE_COMPLETO_CLIENTE;
/

--Uso de la funcion
SELECT GET_NOMBRE_COMPLETO_CLIENTE(22) FROM DUAL;


-- 2. Funcion que retorna el correo del cliente si encuentra el ID
CREATE OR REPLACE FUNCTION GET_EMAIL_USUARIO (
    P_ID_USUARIO IN NUMBER
) 
RETURN VARCHAR2 
IS
    --Valor a devolver
    V_EMAIL VARCHAR2(125);
BEGIN
    --Asigna el valor a V_Email
    SELECT GMAIL_USUARIO
    INTO V_EMAIL
    FROM LENGUAJES_USUARIO_TB
    --Busca el ID
    WHERE ID_USUARIO = P_ID_USUARIO;

    RETURN V_EMAIL;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Correo no encontrado';
END GET_EMAIL_USUARIO;
/

--Uso de la funcion
SELECT GET_EMAIL_USUARIO(2) FROM DUAL;

-- 3. Funcion que retorna el total de productos de una categoria
CREATE OR REPLACE FUNCTION GET_STOCK_TOTAL_CATEGORIA (
    P_ID_CATEGORIA IN NUMBER
) 
RETURN NUMBER 
IS
    --Valor a devolver
    V_STOCK_TOTAL NUMBER;
BEGIN
    --Suma los valores en STOCK
    SELECT SUM(STOCK)
    INTO V_STOCK_TOTAL
    FROM LENGUAJES_PRODUCTO_TB
    --Busca por el ID de Categoria
    WHERE ID_CATEGORIA = P_ID_CATEGORIA;

    --Retorna el valor, si es null, devuelve 0
    RETURN NVL(V_STOCK_TOTAL, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END GET_STOCK_TOTAL_CATEGORIA;
/

--Uso de la funcion
SELECT GET_STOCK_TOTAL_CATEGORIA(2) FROM DUAL;



-- 4. Funcion que devuelve el nombre del proveedor por ID
CREATE OR REPLACE FUNCTION GET_NOMBRE_PROVEEDOR (
    P_ID_PROVEEDOR IN NUMBER
) 
RETURN VARCHAR2 
IS
    --Valor a devolver
    V_NOMBRE_PROVEEDOR VARCHAR2(100);
BEGIN
    --Selecciona el nombre del proveedor
    SELECT NOMBRE_PROVEEDOR
    INTO V_NOMBRE_PROVEEDOR
    FROM LENGUAJES_PROVEEDOR_TB
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;

    --Retorna el nombre
    RETURN V_NOMBRE_PROVEEDOR;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Proveedor no encontrado';
END GET_NOMBRE_PROVEEDOR;
/

--Uso de la funcion
SELECT GET_NOMBRE_PROVEEDOR(1) FROM DUAL;



-- 5. Funcion que devuelve el total de ventas por cliente
CREATE OR REPLACE FUNCTION GET_TOTAL_VENTAS_CLIENTE (
    P_ID_CLIENTE IN NUMBER
) 
RETURN NUMBER 
IS
    --Valor a devolver
    V_TOTAL NUMBER(10,2);
BEGIN
    --Suma los valores de las ventas
    SELECT SUM(TOTAL)
    INTO V_TOTAL
    FROM LENGUAJES_VENTA_TB V
    JOIN LENGUAJES_PEDIDO_TB P ON V.ID_PEDIDO = P.ID_PEDIDO
    WHERE P.ID_CLIENTE = P_ID_CLIENTE;

    --Retorna el valor de la suma, si es null, devuelve 0
    RETURN NVL(V_TOTAL, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END GET_TOTAL_VENTAS_CLIENTE;
/

--Uso de la funcion
SELECT GET_TOTAL_VENTAS_CLIENTE(22) FROM DUAL;


--6. Funcion que devuelve el nombre del proveedor por PRODUCTO
CREATE OR REPLACE FUNCTION GET_PROVEEDOR_PRODUCTO (
    P_ID_PRODUCTO IN NUMBER
) 
RETURN VARCHAR2 
IS
    --Valor a devolver
    V_PROVEEDOR VARCHAR2(100);
BEGIN
    SELECT NOMBRE_PROVEEDOR
    INTO V_PROVEEDOR
    FROM LENGUAJES_PROVEEDOR_TB PR
    JOIN LENGUAJES_PRODUCTO_TB P ON PR.ID_PROVEEDOR = P.ID_PROVEEDOR
    WHERE P.ID_PRODUCTO = P_ID_PRODUCTO;

    --Devuelve el proveedor
    RETURN V_PROVEEDOR;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Proveedor no encontrado';
END GET_PROVEEDOR_PRODUCTO;
/

--Uso de la funcion
SELECT GET_PROVEEDOR_PRODUCTO(1) FROM DUAL;



-- 7. Funcion que retorna el valor total de productos en el inventario (STOCK)
CREATE OR REPLACE FUNCTION GET_VALOR_TOTAL_INVENTARIO 
RETURN NUMBER 
IS
    --Valor a devolver
    V_TOTAL_INVENTARIO NUMBER(10,2);
BEGIN
    --Multiplica la cantidad de stock por el precio
    SELECT SUM(STOCK * PRECIO)
    INTO V_TOTAL_INVENTARIO
    FROM LENGUAJES_PRODUCTO_TB;

    --Retorna el valor de la suma, si es null, devuelve 0
    RETURN NVL(V_TOTAL_INVENTARIO, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END GET_VALOR_TOTAL_INVENTARIO;
/

--Uso de la funcion
SELECT GET_VALOR_TOTAL_INVENTARIO() FROM DUAL;



-- 8. funcion que retorna el cliente con mas pedidos
CREATE OR REPLACE FUNCTION GET_CLIENTE_TOP_PEDIDOS 
RETURN VARCHAR2 
IS
    --Valor a devolver
    V_CLIENTE_TOP VARCHAR2(300);
BEGIN
    --selecciona los datos y los une con un delimitador
    SELECT C.NOMBRE || ' ' || C.APELLIDO1 || ' ' || NVL(C.APELLIDO2, '')
    INTO V_CLIENTE_TOP
    FROM LENGUAJES_CLIENTE_TB C
    JOIN LENGUAJES_PEDIDO_TB P ON C.ID_CLIENTE = P.ID_CLIENTE
    GROUP BY C.ID_CLIENTE, C.NOMBRE, C.APELLIDO1, C.APELLIDO2
    --Ordena los clientes en forma descendiente y selcciona la primera fila unicamente
    ORDER BY COUNT(P.ID_PEDIDO) DESC
    FETCH FIRST ROW ONLY;
    
    --Devuelve el cliente de la priema fila
    RETURN V_CLIENTE_TOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No hay pedidos';
END GET_CLIENTE_TOP_PEDIDOS;
/

--Uso de la funcion
SELECT GET_CLIENTE_TOP_PEDIDOS() FROM DUAL;



-- 9. funcion que devuelve el valor total de los productos en una categoria
CREATE OR REPLACE FUNCTION GET_PRECIO_TOTAL_POR_CATEGORIA(
    P_ID_CATEGORIA IN NUMBER
) RETURN NUMBER IS
    --Valor a devolver
    V_PRECIO_TOTAL NUMBER;
BEGIN
    --Suma el precio de los productos
    SELECT SUM(PRECIO)
    INTO V_PRECIO_TOTAL
    FROM LENGUAJES_PRODUCTO_TB
    --Busca el ID
    WHERE ID_CATEGORIA = P_ID_CATEGORIA;

    --Retorna el valor de la suma, si es null, devuelve 0
    RETURN NVL(V_PRECIO_TOTAL, 0);
END;
/

--Uso de la funcion
SELECT GET_PRECIO_TOTAL_POR_CATEGORIA(3) FROM DUAL;



-- 10. Funcion que devuelve el total de inventario(STOCK) por proveedor
CREATE OR REPLACE FUNCTION GET_TOTAL_STOCK_POR_PROVEEDOR(
    P_ID_PROVEEDOR IN NUMBER
) RETURN NUMBER IS
    --Valor a devolver
    V_TOTAL_STOCK NUMBER;
BEGIN
    --Suma el lo que se tiene en stock
    SELECT SUM(STOCK)
    INTO V_TOTAL_STOCK
    FROM LENGUAJES_PRODUCTO_TB
    --Busca el ID del proveedor
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;
    --Retorna el valor de la suma, si es null, devuelve 0
    RETURN NVL(V_TOTAL_STOCK, 0);
END;
/

--Uso de la funcion
SELECT GET_TOTAL_STOCK_POR_PROVEEDOR(2) FROM DUAL;

------------------------------------------------------------------TRIGGERS-------------------------------------------------------
------------------------------------------------------------------TRIGGERS-------------------------------------------------------
------------------------------------------------------------------TRIGGERS-------------------------------------------------------

CREATE OR REPLACE TRIGGER TRG_LENGUAJES_CLIENTE_ID
BEFORE INSERT ON LENGUAJES_CLIENTE_TB
FOR EACH ROW
BEGIN
    IF :NEW.ID_CLIENTE IS NULL THEN
        :NEW.ID_CLIENTE := LENGUAJES_CLIENTE_SEQ.NEXTVAL;
    END IF;
END;
/

----------------------------LENGUAJES_TELEFONO_CLIENTE_TRG

CREATE OR REPLACE TRIGGER LENGUAJES_TELEFONO_CLIENTE_TRG
BEFORE INSERT ON LENGUAJES_TELEFONO_CLIENTE_TB
FOR EACH ROW
BEGIN
    IF :NEW.ID_TELEFONO IS NULL THEN
        :NEW.ID_TELEFONO := LENGUAJES_TELEFONO_CLIENTE_SEQ.NEXTVAL;
    END IF;
END;


select * from lenguajes_telefono_cliente_tb;


---------------------------------------------------TELEFONO PROVEEDOR---------------------------------------------------------------
-----------------------------------------------------Detalle-Ventas-----------------------------------------------------------------
------------------------Vista proveedor con telefono

CREATE VIEW PROVEEDOR_TELEFONO_VW
AS
SELECT P.ID_PROVEEDOR, P.NOMBRE_PROVEEDOR,T.TELEFONO_PROVEEDOR

FROM LENGUAJES_PROVEEDOR_TB P
INNER JOIN LENGUAJES_TELEFONO_PROVEEDOR_TB T
ON P.ID_PROVEEDOR = T.ID_PROVEEDOR;


SELECT * FROM PROVEEDOR_TELEFONO_VW;


----- LISTAR TODOS LOS TELEFONOS DE PROVEEDORES PARA CRUD
CREATE OR REPLACE PROCEDURE VER_TODOS_TELEFONOS_PROVEEDORES_SP(TELEFONO_PROVEEDOR_CURSOR OUT SYS_REFCURSOR)
IS 
BEGIN
    OPEN TELEFONO_PROVEEDOR_CURSOR FOR
        SELECT ID_TELEFONO_PROVEEDOR,ID_PROVEEDOR,TELEFONO_PROVEEDOR
        FROM LENGUAJES_TELEFONO_PROVEEDOR_TB;
END VER_TODOS_TELEFONOS_PROVEEDORES_SP;


----EJECUCION----
VARIABLE TELEFONO_PROVEEDOR_CURSOR REFCURSOR;
EXEC VER_TODOS_TELEFONOS_PROVEEDORES_SP(:TELEFONO_PROVEEDOR_CURSOR);
PRINT TELEFONO_PROVEEDOR_CURSOR;


-------------------------

-------Actualizar Informacion Telefono---------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_TELEFONO_PROVEEDOR_SP(P_ID_Telefono IN NUMBER,P_TELEFONO IN VARCHAR2 )
AS
BEGIN
    UPDATE LENGUAJES_TELEFONO_PROVEEDOR_TB
    SET TELEFONO_PROVEEDOR = P_TELEFONO
    WHERE ID_TELEFONO_PROVEEDOR = P_ID_telefono;
    COMMIT;
    
    dbms_output.put_line('Telefono Actualizado');

END ACTUALIZAR_TELEFONO_PROVEEDOR_SP;

begin 
ACTUALIZAR_TELEFONO_PROVEEDOR_SP(31,'88888888');
end;



---------------Eliminar un Telefono del proveedor--------------
CREATE OR REPLACE PROCEDURE ELIMINAR_TELEFONO_PROVEEDOR_SP(P_ID_TELEFONO IN NUMBER)
AS
BEGIN
    DELETE FROM LENGUAJES_TELEFONO_PROVEEDOR_TB WHERE ID_TELEFONO_PROVEEDOR = P_ID_TELEFONO;
    DBMS_OUTPUT.PUT_LINE('TELEFONO ELIMINADO CORRECTAMENTE');
    COMMIT;
END ELIMINAR_TELEFONO_PROVEEDOR_SP;


---------------Ejecucion---------------
BEGIN 
ELIMINAR_TELEFONO_PROVEEDOR_SP(31);
END;





----- DETALLE PEDIDO 



----- LISTAR TODOS LOS DETALLES DE PEDIDOS
CREATE OR REPLACE PROCEDURE VER_TODOS_DETALLES_PEDIDOS_SP(DETALLE_PEDIDO_CURSOR OUT SYS_REFCURSOR)
IS 
BEGIN
    OPEN DETALLE_PEDIDO_CURSOR FOR
        SELECT ID_DETALLE_PEDIDO,ID_PEDIDO,ID_PRODUCTO,CANTIDAD, PRECIO_DETALLE_PEDIDO
        FROM LENGUAJES_DETALLE_PEDIDO_TB;
END VER_TODOS_DETALLES_PEDIDOS_SP;


----EJECUCION----
VARIABLE DETALLE_PEDIDO_CURSOR REFCURSOR;
EXEC VER_TODOS_DETALLES_PEDIDOS_SP(:DETALLE_PEDIDO_CURSOR);
PRINT DETALLE_PEDIDO_CURSOR;


-----------------Eliminar---DETALLE_PEDIDO------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_DETALLE_PEDIDO_SP(P_ID_DETALLE_PEDIDO IN NUMBER)
AS
BEGIN
    DELETE FROM LENGUAJES_DETALLE_PEDIDO_TB 
    WHERE ID_DETALLE_PEDIDO = P_ID_DETALLE_PEDIDO;
    DBMS_OUTPUT.PUT_LINE('Detalle_Pedido eliminado con exito.' || SQLERRM);
    
END ELIMINAR_DETALLE_PEDIDO_SP;
COMMIT;


------------Ejecucion---------

SET SERVEROUTPUT ON;
EXECUTE ELIMINAR_DETALLE_PEDIDO_SP(20);


--------------------------MODIFICAR DETALLE PEDIDOS---------------------

CREATE OR REPLACE PROCEDURE MODIFICAR_DETALLE_PEDIDO_SP(P_ID_DETALLE_PEDIDO IN NUMBER, P_ID_PEDIDO IN NUMBER
, P_ID_PRODUCTO IN NUMBER, P_CANTIDAD IN NUMBER, P_PRECIO_DETALLE_PEDIDO IN NUMBER)
as
begin
    UPDATE LENGUAJES_DETALLE_PEDIDO_TB
    SET ID_PEDIDO = P_ID_PEDIDO,
    ID_PRODUCTO = P_ID_PRODUCTO,
    CANTIDAD = P_CANTIDAD,
    PRECIO_DETALLE_PEDIDO = P_PRECIO_DETALLE_PEDIDO
    WHERE ID_DETALLE_PEDIDO = P_ID_DETALLE_PEDIDO;
    
    DBMS_OUTPUT.PUT_LINE('Detalle_Pedido actulizado');
    commit;

end MODIFICAR_DETALLE_PEDIDO_SP;


-----EJECUCION---------------------

SET SERVEROUTPUT ON;
BEGIN
    MODIFICAR_DETALLE_PEDIDO_SP(11,11,1,3,2250);
END;
/


-----------------PROCEDIMIENTO INSERT DETALLE_PEDIDO-------------------------

CREATE OR REPLACE PROCEDURE INSERT_DETALLE_PEDIDO (
    P_ID_PEDIDO IN NUMBER,
    P_ID_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_DETALLE_PEDIDO IN NUMBER
) AS
BEGIN
    INSERT INTO LENGUAJES_DETALLE_PEDIDO_TB (
        ID_DETALLE_PEDIDO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD, PRECIO_DETALLE_PEDIDO
    ) VALUES (
        LENGUAJES_DETALLE_PEDIDO_SEQ.NEXTVAL, P_ID_PEDIDO, P_ID_PRODUCTO, P_CANTIDAD, P_PRECIO_DETALLE_PEDIDO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL DETALLE PEDIDO');
END;


--------------------- EJECUCION
BEGIN
  INSERT_DETALLE_PEDIDO(20,6,3,8000.50);
END;

------------------------------------------------------Cursores Ver-------------------------------------------------------------------
------------------------------------------------------Cursores Ver-------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ver_total_cliente_sp (cliente_cursor OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN cliente_cursor FOR
        SELECT ID_CLIENTE, NOMBRE, APELLIDO1, APELLIDO2, GMAIL 
        FROM Lenguajes_Cliente_tb;
END ver_total_cliente_sp;

---EJECUCION.----
--DEFINICION---
VARIABLE cliente_cursor REFCURSOR;
---EJECUTAR SP
EXEC ver_total_cliente_sp(:cliente_cursor);
--IMPRIMIR---
PRINT cliente_cursor;

-----------Ver todos los telefonos-------
create or replace PROCEDURE VER_TODOS_TELEFONOS_SP(TELEFONO_CURSOR OUT SYS_REFCURSOR)
IS 
BEGIN
    OPEN TELEFONO_CURSOR FOR
        SELECT ID_TELEFONO,ID_CLIENTE,TELEFONO
        FROM LENGUAJES_TELEFONO_CLIENTE_TB;
END VER_TODOS_TELEFONOS_SP;

----------Ver todos los pedidos

CREATE OR REPLACE PROCEDURE VER_TODOS_PEDIDOS_SP(PEDIDOS_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN 
    OPEN PEDIDOS_CURSOR FOR
        SELECT ID_PEDIDO, ID_CLIENTE,
               FECHA_PEDIDO, ESTADO_PEDIDO
        FROM LENGUAJES_PEDIDO_TB;
END VER_TODOS_PEDIDOS_SP;
/
-------EJECUCION-----
VARIABLE PEDIDOS_CURSOR REFCURSOR;
EXEC VER_TODOS_PEDIDOS_SP(:PEDIDOS_CURSOR);
PRINT PEDIDOS_CURSOR;


CREATE OR REPLACE PROCEDURE VER_TODOS_USUARIOS_SP(USUARIOS_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN USUARIOS_CURSOR FOR 
        SELECT ID_USUARIO, USERNAME,
        NOMBRE, APELLIDO1, APELLIDO2, GMAIL_USUARIO
        FROM LENGUAJES_USUARIO_TB;
END VER_TODOS_USUARIOS_SP;
-------EJECUCION-----

VARIABLE USUARIOS_CURSOR REFCURSOR;
EXEC VER_TODOS_USUARIOS_SP(:USUARIOS_CURSOR);
PRINT USUARIOS_CURSOR;


----------Ver Todas las ventas 
CREATE OR REPLACE PROCEDURE VER_TODOS_VENTAS_SP(VENTAS_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN VENTAS_CURSOR FOR 
        SELECT ID_VENTA, ID_PEDIDO, 
            ID_USUARIO, TOTAL, FECHA_VENTA
        FROM 
            LENGUAJES_VENTA_TB;
END VER_TODOS_VENTAS_SP;
/
---------ejecucion-----
SET SERVEROUTPUT ON;
VARIABLE VENTAS_CURSOR REFCURSOR;
BEGIN
    VER_TODOS_VENTAS_SP(:VENTAS_CURSOR);
END;
/
PRINT VENTAS_CURSOR;

----------------Categoria------------------
CREATE OR REPLACE PROCEDURE VER_CATEGORIA_SP(CATEGORIA_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CATEGORIA_CURSOR FOR 
        SELECT ID_CATEGORIA, NOMBRE_CATEGORIA, DESCRIPCION
        FROM LENGUAJES_CATEGORIA_TB;
        
END VER_CATEGORIA_SP;

VARIABLE CATEGORIA_CURSOR REFCURSOR;
EXEC VER_CATEGORIA_SP(:CATEGORIA_CURSOR);
PRINT CATEGORIA_CURSOR;


--------PROVEEDOR------------
CREATE OR REPLACE PROCEDURE VER_PROVEEDORES_SP(PROVEEDOR_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN PROVEEDOR_CURSOR FOR
        SELECT ID_PROVEEDOR,NOMBRE_PROVEEDOR,GMAIL_PROVEEDOR, PAIS, CUIDAD
        FROM LENGUAJES_PROVEEDOR_TB;
        
END VER_PROVEEDORES_SP;


----EJECUCION----
VARIABLE PROVEEDOR_CURSOR REFCURSOR;
EXEC VER_PROVEEDORES_SP(:PROVEEDOR_CURSOR);
PRINT PROVEEDOR_CURSOR;

variable telefono_cursor refcursor;
exec VER_TODOS_TELEFONOS_SP(:telefono_cursor);
print telefono_cursor;



-----------Producto medicamentos------
CREATE OR REPLACE PROCEDURE VER_PRODUCTO_SP(PRODUCTO_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN PRODUCTO_CURSOR FOR
        SELECT ID_PRODUCTO, ID_CATEGORIA, ID_PROVEEDOR,NOMBRE_PRODUCTO,
        STOCK,FECHA_VENCIMIEnTo,PRECIO
        FROM LENGUAJES_producto_tb;
END VER_PRODUCTO_SP;

-----ejecucion----
variable producto_cursor refcursor;
exec ver_producto_sp(:producto_cursor);
print producto_cursor;


CREATE OR REPLACE PROCEDURE VER_FACTURA_SP(FACTURA_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN FACTURA_CURSOR FOR
        SELECT ID_FACTURA, ID_VENTA, ID_CLIENTE, ID_PRODUCTO, 
            CANTIDAD, PRECIO_UNITARIO,  PAGO_TOTAL, 
            FECHA_EMISION, METODO_PAGO
        FROM LENGUAJES_FACTURA_TB;
END VER_FACTURA_SP;
/
set serveroutput on;
variable factura_cursor refcursor;
exec ver_factura_sp(:factura_cursor);
print factura_cursor;


CREATE OR REPLACE VIEW VISTA_PRODUCTOS AS
SELECT 
    P.ID_PRODUCTO,
    P.NOMBRE_PRODUCTO,
    P.STOCK,
    P.PRECIO,
    TO_CHAR(P.FECHA_VENCIMIENTO, 'YYYY-MM-DD') AS FECHA_VENCIMIENTO,
    C.NOMBRE_CATEGORIA AS CATEGORIA,
    PR.NOMBRE_PROVEEDOR AS PROVEEDOR
FROM 
    LENGUAJES_PRODUCTO_TB P
INNER JOIN 
    LENGUAJES_CATEGORIA_TB C ON P.ID_CATEGORIA = C.ID_CATEGORIA
INNER JOIN 
    LENGUAJES_PROVEEDOR_TB PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR;

select * from VISTA_PRODUCTOS;


CREATE OR REPLACE PROCEDURE INSERT_FACTURA (
    P_ID_VENTA IN NUMBER,
    P_ID_CLIENTE IN NUMBER,
    P_ID_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_UNITARIO IN NUMBER,
    P_FECHA_EMISION IN DATE,
    P_METODO_PAGO IN VARCHAR2
) AS
BEGIN
    INSERT INTO LENGUAJES_FACTURA_TB (
        ID_FACTURA, ID_VENTA, ID_CLIENTE, ID_PRODUCTO, CANTIDAD, PRECIO_UNITARIO, PAGO_TOTAL, FECHA_EMISION, METODO_PAGO
    ) VALUES (
        LENGUAJES_FACTURA_SEQ.NEXTVAL, 
        P_ID_VENTA, 
        P_ID_CLIENTE, 
        P_ID_PRODUCTO, 
        P_CANTIDAD, 
        P_PRECIO_UNITARIO, 
        P_CANTIDAD * P_PRECIO_UNITARIO,  -- Calcula el pago total
        P_FECHA_EMISION, 
        P_METODO_PAGO
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR AL INSERTAR LA FACTURA');
END;